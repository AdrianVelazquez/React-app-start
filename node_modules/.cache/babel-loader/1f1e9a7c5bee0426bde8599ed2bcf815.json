{"ast":null,"code":"var _jsxFileName = \"/Users/riotman/Web Development/riot/react apps/start/src/App.js\";\n\n/*\nSOURCES\n=======\n1. https://www.youtube.com/watch?v=DLX62G4lc44&list=PLQe7hfWfchppxMyZ1cVjZMDlBkI74SKBi&index=4&t=442s\n2. https://www.youtube.com/watch?v=00kXjx9k3Os\n3. https://github.com/facebook/create-react-app\n4. https://reactjs.org\n\nNOTES\n=====\n - Components: building block for making re-usable pieces of html\n    - always name your component functions using camel case\n    - always start the name with a capital letter\n      - example: function ThisIsMyApp(){};\n    - components can render other components\n      - a main component can render other html components like:\n        - footers\n        - headers\n        - navigation\n        - posts\n    - components can be split into their own files\n    - components can also be nested\n      - a header component, being rendered by the main App cpmponent, can also render a nav component, or a logo component, or an img component...\n    - each component should be in its own seperate file\n    - name files the same name as the component name\n\n - JSX: Reacts proprietary wrapper around vanilla javascript\n    - let you build Components using html syntax in javascript\n    - you can not render 2 jsx elements next to each other without wrapping them in a container so it counts as one html element with two elements wrapped inside\n        example: ReactDOM.render(\n          <div>\n            <h3>Hello World!</h3>\n            <p>This is a paragraph.</p>\n          </div>,\n          document.getElementById(\"root\")\n      );\n    - you need to import react in any file you use jsx\n\n- Props: passes data around the app\n- State: how to maintain and change data in the app\n- Event Handling: interactivity with users\n- Life cycle methods: hook into timing events of components\n- HTTP: fetch data from an api\n- File structure: you can create a components directory and stick all of your components in there\n    - you will have to change the paths to dependent files like: the css files, and import component in the index.js file\n\nRENDER\n======\n// reacts render method used to render components to the html div with an id of \"root\"\n// render() takes 2 arguments - 1: what you want to render, 2: where you want to render it\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nSTYLING\n=======\n  - to style html elements in jsx, you cant use traditional nameing conventions like you would in a css files\n  - use className to access the dom api when styling\n  - to create a class for styling, use: className=\" \"\n  - you cannot add class names to functional components, only the html jsx inside of them\n*/\nimport React from \"react\";\nimport Header from \"./components/Header\"; // import the footer component\n\nimport Content from \"./components/Content\"; // import the footer component\n\nimport Footer from \"./components/Footer\"; // import the footer component\n\nimport \"./App.css\"; // a component function (functional component)\n// function App() {\n//   // return the jsx you want this component to render\n//   // you cant return two different elements next to each other withput wrapping them in a div\n//   // components return single jsx elements\n//   return (\n//     <div>\n//       <Header />\n//       <Content />\n//       <Footer />\n//     </div>\n//   );\n// }\n\nconst App = () => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81\n  },\n  __self: this\n}, React.createElement(Header, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}), React.createElement(Content, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83\n  },\n  __self: this\n}), React.createElement(Footer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84\n  },\n  __self: this\n})); // make the component available everywhere in the application\n\n\nexport default App;","map":{"version":3,"sources":["/Users/riotman/Web Development/riot/react apps/start/src/App.js"],"names":["React","Header","Content","Footer","App"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAA0C;;AAC1C,OAAOC,OAAP,MAAoB,sBAApB,C,CAA4C;;AAC5C,OAAOC,MAAP,MAAmB,qBAAnB,C,CAA0C;;AAC1C,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG,MACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,EAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF,C,CAQA;;;AACA,eAAeA,GAAf","sourcesContent":["/*\nSOURCES\n=======\n1. https://www.youtube.com/watch?v=DLX62G4lc44&list=PLQe7hfWfchppxMyZ1cVjZMDlBkI74SKBi&index=4&t=442s\n2. https://www.youtube.com/watch?v=00kXjx9k3Os\n3. https://github.com/facebook/create-react-app\n4. https://reactjs.org\n\nNOTES\n=====\n - Components: building block for making re-usable pieces of html\n    - always name your component functions using camel case\n    - always start the name with a capital letter\n      - example: function ThisIsMyApp(){};\n    - components can render other components\n      - a main component can render other html components like:\n        - footers\n        - headers\n        - navigation\n        - posts\n    - components can be split into their own files\n    - components can also be nested\n      - a header component, being rendered by the main App cpmponent, can also render a nav component, or a logo component, or an img component...\n    - each component should be in its own seperate file\n    - name files the same name as the component name\n\n - JSX: Reacts proprietary wrapper around vanilla javascript\n    - let you build Components using html syntax in javascript\n    - you can not render 2 jsx elements next to each other without wrapping them in a container so it counts as one html element with two elements wrapped inside\n        example: ReactDOM.render(\n          <div>\n            <h3>Hello World!</h3>\n            <p>This is a paragraph.</p>\n          </div>,\n          document.getElementById(\"root\")\n      );\n    - you need to import react in any file you use jsx\n\n- Props: passes data around the app\n- State: how to maintain and change data in the app\n- Event Handling: interactivity with users\n- Life cycle methods: hook into timing events of components\n- HTTP: fetch data from an api\n- File structure: you can create a components directory and stick all of your components in there\n    - you will have to change the paths to dependent files like: the css files, and import component in the index.js file\n\nRENDER\n======\n// reacts render method used to render components to the html div with an id of \"root\"\n// render() takes 2 arguments - 1: what you want to render, 2: where you want to render it\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nSTYLING\n=======\n  - to style html elements in jsx, you cant use traditional nameing conventions like you would in a css files\n  - use className to access the dom api when styling\n  - to create a class for styling, use: className=\" \"\n  - you cannot add class names to functional components, only the html jsx inside of them\n*/\nimport React from \"react\";\nimport Header from \"./components/Header\"; // import the footer component\nimport Content from \"./components/Content\"; // import the footer component\nimport Footer from \"./components/Footer\"; // import the footer component\nimport \"./App.css\";\n\n// a component function (functional component)\n// function App() {\n//   // return the jsx you want this component to render\n//   // you cant return two different elements next to each other withput wrapping them in a div\n//   // components return single jsx elements\n//   return (\n//     <div>\n//       <Header />\n//       <Content />\n//       <Footer />\n//     </div>\n//   );\n// }\n\nconst App = () => (\n  <div>\n    <Header />\n    <Content />\n    <Footer />\n  </div>\n);\n\n// make the component available everywhere in the application\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/riotman/Web Development/riot/react apps/start/src/App.js\";\n\n/*\nSOURCES\n=======\n1. https://www.youtube.com/watch?v=DLX62G4lc44&list=PLQe7hfWfchppxMyZ1cVjZMDlBkI74SKBi&index=4&t=442s\n2. https://www.youtube.com/watch?v=00kXjx9k3Os\n3. https://github.com/facebook/create-react-app\n4. https://reactjs.org\n\nNOTES\n=====\n - Components: building block for making re-usable pieces of html\n    - always name your component functions using camel case\n    - always start the name with a capital letter\n      - example: function ThisIsMyApp(){};\n    - components can render other components\n      - a main component can render other html components like:\n        - footers\n        - headers\n        - navigation\n        - posts\n    - components can be split into their own files\n    - components can also be nested\n      - a header component, being rendered by the main App cpmponent, can also render a nav component, or a logo component, or an img component...\n    - each component should be in its own seperate file\n    - name files the same name as the component name\n\n - JSX: Reacts proprietary wrapper around vanilla javascript\n    - let you build Components using html syntax in javascript\n    - you can not render 2 jsx elements next to each other without wrapping them in a container so it counts as one html element with two elements wrapped inside\n        example: ReactDOM.render(\n          <div>\n            <h3>Hello World!</h3>\n            <p>This is a paragraph.</p>\n          </div>,\n          document.getElementById(\"root\")\n      );\n    - you need to import react in any file you use jsx\n\n- Props: passes data around the app\n- State: how to maintain and change data in the app\n- Event Handling: interactivity with users\n- Life cycle methods: hook into timing events of components\n- HTTP: fetch data from an api\n- File structure: you can create a components directory and stick all of your components in there\n    - you will have to change the paths to dependent files like: the css files, and import component in the index.js file\n\nRENDER\n======\n// reacts render method used to render components to the html div with an id of \"root\"\n// render() takes 2 arguments - 1: what you want to render, 2: where you want to render it\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n*/\nimport React from \"react\";\nimport Footer from \"./Footer\"; // import the footer component\n\nimport \"./App.css\"; // a component function (functional component)\n\nfunction App() {\n  // return the jsx you want this component to render\n  // you cant return two different elements next to each other withput wrapping them in a div\n  // components return single jsx elements\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Adrian Velazquez\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"This is a small paragraph about me...\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Places I want to visit in the future:\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Thailand\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Germany\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Spain\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"South Africa\")), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n} // make the component available everywhere in the application\n\n\nexport default App;","map":{"version":3,"sources":["/Users/riotman/Web Development/riot/react apps/start/src/App.js"],"names":["React","Footer","App"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAA+B;;AAC/B,OAAO,WAAP,C,CAEA;;AACA,SAASC,GAAT,GAAe;AACb;AACA;AACA;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,CAJF,EAWE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAeD,C,CAED;;;AACA,eAAeA,GAAf","sourcesContent":["/*\nSOURCES\n=======\n1. https://www.youtube.com/watch?v=DLX62G4lc44&list=PLQe7hfWfchppxMyZ1cVjZMDlBkI74SKBi&index=4&t=442s\n2. https://www.youtube.com/watch?v=00kXjx9k3Os\n3. https://github.com/facebook/create-react-app\n4. https://reactjs.org\n\nNOTES\n=====\n - Components: building block for making re-usable pieces of html\n    - always name your component functions using camel case\n    - always start the name with a capital letter\n      - example: function ThisIsMyApp(){};\n    - components can render other components\n      - a main component can render other html components like:\n        - footers\n        - headers\n        - navigation\n        - posts\n    - components can be split into their own files\n    - components can also be nested\n      - a header component, being rendered by the main App cpmponent, can also render a nav component, or a logo component, or an img component...\n    - each component should be in its own seperate file\n    - name files the same name as the component name\n\n - JSX: Reacts proprietary wrapper around vanilla javascript\n    - let you build Components using html syntax in javascript\n    - you can not render 2 jsx elements next to each other without wrapping them in a container so it counts as one html element with two elements wrapped inside\n        example: ReactDOM.render(\n          <div>\n            <h3>Hello World!</h3>\n            <p>This is a paragraph.</p>\n          </div>,\n          document.getElementById(\"root\")\n      );\n    - you need to import react in any file you use jsx\n\n- Props: passes data around the app\n- State: how to maintain and change data in the app\n- Event Handling: interactivity with users\n- Life cycle methods: hook into timing events of components\n- HTTP: fetch data from an api\n- File structure: you can create a components directory and stick all of your components in there\n    - you will have to change the paths to dependent files like: the css files, and import component in the index.js file\n\nRENDER\n======\n// reacts render method used to render components to the html div with an id of \"root\"\n// render() takes 2 arguments - 1: what you want to render, 2: where you want to render it\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n*/\nimport React from \"react\";\nimport Footer from \"./Footer\"; // import the footer component\nimport \"./App.css\";\n\n// a component function (functional component)\nfunction App() {\n  // return the jsx you want this component to render\n  // you cant return two different elements next to each other withput wrapping them in a div\n  // components return single jsx elements\n  return (\n    <div>\n      <h1>Adrian Velazquez</h1>\n      <p>This is a small paragraph about me...</p>\n      <p>Places I want to visit in the future:</p>\n      <ul>\n        <li>Thailand</li>\n        <li>Germany</li>\n        <li>Spain</li>\n        <li>South Africa</li>\n      </ul>\n\n      <Footer />\n    </div>\n  );\n}\n\n// make the component available everywhere in the application\nexport default App;\n"]},"metadata":{},"sourceType":"module"}